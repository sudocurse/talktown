from business import *
from occupation import *

class BusinessesConfig(object):
    """Configuration parameters related to businesses."""
    # Company naming

    chance_company_gets_named_after_owner = 0.5
    # Companies deciding where to locate themselves
    function_to_determine_company_preference_for_local_population = (
        # This specifies how strongly companies are compelled to purchase lots near
        # densely populated areas of town
        lambda secondary_pop, tertiary_pop: (secondary_pop * 5) + (tertiary_pop * 2)
    )
    function_to_determine_company_penalty_for_nearby_company_of_same_type = (
        # This is jury-rigged so that being within a few blocks of another company of the
        # same type will cancel out a relatively huge local population
        lambda dist_to_nearest_company_of_same_type: min(
            (((100 - dist_to_nearest_company_of_same_type) ** 0.5) - 8) ** 10,
            0)
    )
    # Company types that are public resources, i.e., not privately owned
    public_company_types = (CityHall, FireStation, Hospital, PoliceStation, School, University, Cemetery, Park)
    public_places_closed_at_night = (Cemetery, Park)
    # Company types that get established on tracts, not on lots
    companies_that_get_established_on_tracts = (
        Cemetery, Park, Farm, Quarry, CoalMine
    )
    # Businesses (besides farms, which exist by default) at the time of a town being founded
    chance_of_a_coal_mine_at_time_of_town_founding = 0.2
    chance_of_a_quarry_at_time_of_town_founding = 0.15
    # Number of units in apartment complexes
    number_of_apartment_units_in_new_complex_min = 4
    number_of_apartment_units_in_new_complex_max = 16
    # This dictionary specifies three things about each business type: the year
    # at which it may be established in the simulation (its advent), the year at
    # which its closure will become highly likely (its demise), and the minimum
    # population that must live in the town in order for a business of this type
    # to be established; these are specified so that businesses don't appear
    # anachronistically or otherwise out of place
    business_types_advent_demise_and_minimum_population = {
        # Business class: (advent, demise, minimum population)
        ApartmentComplex: (1880, 9999, 50),
        Bakery: (0, 9999, 50),
        Bank: (0, 9999, 100),
        Bar: (1920, 9999, 100),
        Barbershop: (0, 9999, 50),
        BlacksmithShop: (0, 1945, 0),
        Brewery: (0, 9999, 0),
        BusDepot: (1930, 9999, 9999),
        ButcherShop: (0, 1960, 50),
        CandyStore: (0, 1960, 100),
        CarpentryCompany: (0, 9999, 70),
        Cemetery: (0, 9999, 1),
        CityHall: (0, 9999, 100),
        ClothingStore: (0, 1880, 100),
        CoalMine: (0, 9999, 0),
        ConstructionFirm: (0, 9999, 80),
        Dairy: (0, 1945, 30),
        DayCare: (1950, 9999, 200),
        Deli: (1880, 9999, 100),
        DentistOffice: (0, 9999, 75),
        DepartmentStore: (1880, 9999, 200),
        Diner: (1945, 9999, 30),
        Distillery: (0, 1919, 0),
        DrugStore: (0, 1950, 30),
        Farm: (0, 1920, 0),
        FireStation: (0, 9999, 100),
        Foundry: (1830, 1950, 100),
        FurnitureStore: (0, 1930, 20),
        GeneralStore: (0, 1930, 20),
        GroceryStore: (0, 1950, 20),
        HardwareStore: (0, 9999, 40),
        Hospital: (0, 9999, 200),
        Hotel: (0, 9999, 50),
        Inn: (0, 9999, 0),
        InsuranceCompany: (0, 9999, 200),
        JeweleryShop: (0, 9999, 200),
        LawFirm: (0, 9999, 150),
        OptometryClinic: (1900, 9999, 200),
        PaintingCompany: (0, 9999, 100),
        Park: (0, 9999, 100),
        Pharmacy: (1960, 9999, 200),
        PlasticSurgeryClinic: (1970, 9999, 9999),
        PlumbingCompany: (0, 9999, 100),
        PoliceStation: (0, 9999, 100),
        Quarry: (0, 9999, 0),
        RealtyFirm: (0, 9999, 80),
        Restaurant: (0, 9999, 50),
        School: (0, 9999, 1),
        ShoemakerShop: (0, 1900, 20),
        Supermarket: (1945, 9999, 200),
        TailorShop: (0, 9999, 40),
        TattooParlor: (1970, 9999, 300),
        Tavern: (0, 1920, 20),
        TaxiDepot: (1930, 9999, 9999),
        University: (0, 9999, 9999),
    }
    # Chance a business shuts downs ome timestep after its specified demise -- i.e., chance a business
    # will shut down once its anachronistic, like a blacksmith shop after 1945
    chance_a_business_shuts_down_on_timestep_after_its_demise = (1 / 730.) / 3  # Average will last 3 years
    # Max number of businesses of each type that may be in a town at the same time; this
    # won't cause businesses to shut down, but rather will prevent new businesses of a
    # maxed-out type from opening
    max_number_of_business_types_at_one_time = {
        ApartmentComplex: 99,
        Bakery: 2,
        Bank: 2,
        Bar: 3,
        Barbershop: 1,
        BlacksmithShop: 1,
        Brewery: 1,
        BusDepot: 1,
        ButcherShop: 2,
        CandyStore: 1,
        CarpentryCompany: 1,
        Cemetery: 1,
        CityHall: 1,
        ClothingStore: 2,
        CoalMine: 1,
        ConstructionFirm: 1,
        Dairy: 1,
        DayCare: 1,
        Deli: 2,
        DentistOffice: 1,
        DepartmentStore: 1,
        Diner: 3,
        Distillery: 1,
        DrugStore: 1,
        Farm: 99,
        FireStation: 1,
        Foundry: 1,
        FurnitureStore: 1,
        GeneralStore: 1,
        GroceryStore: 2,
        HardwareStore: 1,
        Hospital: 1,
        Hotel: 1,
        Inn: 2,
        InsuranceCompany: 1,
        JeweleryShop: 1,
        LawFirm: 1,
        OptometryClinic: 1,
        PaintingCompany: 1,
        Park: 99,
        Pharmacy: 1,
        PlasticSurgeryClinic: 1,
        PlumbingCompany: 2,
        PoliceStation: 1,
        Quarry: 1,
        RealtyFirm: 1,
        Restaurant: 5,
        School: 1,
        ShoemakerShop: 1,
        Supermarket: 1,
        TailorShop: 1,
        TattooParlor: 1,
        Tavern: 2,
        TaxiDepot: 1,
        University: 1,
    }
    # Services provided by each business type -- used to drive reasoning behind character routines
    services_provided_by_business_of_type = {
        ApartmentComplex: (),
        Bakery: ('baked goods',),
        Bank: ('banking',),
        Bar: ('bar',),
        Barbershop: ('haircut',),
        BlacksmithShop: ('tools',),
        Brewery: (),
        BusDepot: ('transport',),
        ButcherShop: ('meat',),
        CandyStore: ('confections',),
        CarpentryCompany: (),  # MAYBE RANDOMLY HAVE PLUMBERS, ETC. VISIT HOMES AND BE THERE ON TIMESTEP
        Cemetery: ('cemetery',),
        CityHall: (),
        ClothingStore: ('clothes',),
        CoalMine: (),
        ConstructionFirm: (),
        Dairy: ('dairy',),
        DayCare: (),
        Deli: ('restaurant',),
        DentistOffice: ('dentist',),
        DepartmentStore: ('clothes', 'furniture', 'tools', 'confections', 'shoes'),
        Diner: ('restaurant',),
        Distillery: (),
        DrugStore: ('medicine', 'confections'),
        Farm: ('meat', 'dairy'),
        FireStation: (),
        Foundry: (),
        FurnitureStore: ('furniture',),
        GeneralStore: ('clothes', 'furniture', 'tools', 'confections'),
        GroceryStore: ('baked goods', 'meat', 'confections', 'dairy'),
        HardwareStore: ('tools',),
        Hospital: (),
        Hotel: ('restaurant', 'bar',),
        Inn: (),
        InsuranceCompany: ('insurance',),
        JeweleryShop: ('jewelry',),
        LawFirm: (),
        OptometryClinic: ('eyeglasses',),
        PaintingCompany: (),
        Park: ('park',),
        Pharmacy: ('medicine',),
        PlasticSurgeryClinic: ('plastic surgery',),
        PlumbingCompany: (),
        PoliceStation: (),
        Quarry: (),
        RealtyFirm: (),
        Restaurant: ('restaurant',),
        School: (),
        ShoemakerShop: ('shoes',),
        Supermarket: ('baked goods', 'meat', 'confections', 'medicine', 'dairy'),
        TailorShop: ('clothes',),
        TattooParlor: ('tattoo',),
        Tavern: ('bar', 'restaurant'),
        TaxiDepot: ('transport',),
        University: (),
    }
    # Occupation classes for owners/proprietors of each business type
    owner_occupations_for_each_business_type = {
        ApartmentComplex: Landlord,
        Bakery: Baker,
        Bank: Owner,
        Bar: Proprietor,
        Barbershop: Barber,
        BlacksmithShop: Blacksmith,
        Brewery: Owner,
        BusDepot: None,
        ButcherShop: Butcher,
        CandyStore: Proprietor,
        CarpentryCompany: Carpenter,
        Cemetery: None,
        CityHall: None,
        ClothingStore: Clothier,
        CoalMine: Owner,
        ConstructionFirm: Architect,
        Dairy: Milkman,
        DayCare: DaycareProvider,
        Deli: Proprietor,
        DentistOffice: Dentist,
        DepartmentStore: Owner,
        Diner: Proprietor,
        Distillery: Distiller,
        DrugStore: Druggist,
        Farm: Farmer,
        FireStation: None,
        Foundry: Owner,
        FurnitureStore: Woodworker,
        GeneralStore: Proprietor,
        GroceryStore: Grocer,
        HardwareStore: Proprietor,
        Hospital: None,
        Hotel: Owner,
        Inn: Innkeeper,
        InsuranceCompany: InsuranceAgent,
        JeweleryShop: Jeweler,
        LawFirm: Lawyer,
        OptometryClinic: Optometrist,
        PaintingCompany: Plasterer,
        Park: None,
        Pharmacy: Owner,
        PlasticSurgeryClinic: PlasticSurgeon,
        PlumbingCompany: Plumber,
        PoliceStation: None,
        Quarry: Owner,
        RealtyFirm: Realtor,
        Restaurant: Proprietor,
        School: None,
        ShoemakerShop: Shoemaker,
        Supermarket: Owner,
        TailorShop: Tailor,
        TattooParlor: TattooArtist,
        Tavern: Proprietor,
        TaxiDepot: Owner,
        University: None,
    }
    # Initial vacant positions for each business type
    initial_job_vacancies = {
        ApartmentComplex: {
            'day': (),
            'night': (Janitor,),
            'supplemental day': [Secretary, Janitor],
            'supplemental night': [],
        },
        Bank: {
            'day': (BankTeller,),
            'night': (Janitor,),
            'supplemental day': [BankTeller, BankTeller, Manager],
            'supplemental night': [],
        },
        Bar: {
            'day': (Bartender,),
            'night': (Bartender,),
            'supplemental day': [],
            'supplemental night': [Bartender, Bartender, Manager],
        },
        Barbershop: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [],
        },
        BusDepot: {
            'day': (Secretary, BusDriver, Manager),
            'night': (BusDriver,),
            'supplemental day': [BusDriver],
            'supplemental night': [],
        },
        CityHall: {
            'day': (Secretary,),  # Mayor excluded due to special hiring process
            'night': (),
            'supplemental day': [Secretary],
            'supplemental night': [Janitor],
        },
        ConstructionFirm: {
            'day': (Secretary, Bricklayer, Builder),
            'night': (),
            'supplemental day': [Builder, Builder],
            'supplemental night': [Janitor],
        },
        DayCare: {
            'day': (),
            'night': (Janitor,),
            'supplemental day': [DaycareProvider, DaycareProvider],
            'supplemental night': [],
        },
        FireStation: {
            'day': (Firefighter,),
            'night': (Firefighter,),
            'supplemental day': [FireChief, Secretary],
            'supplemental night': [Firefighter],
        },
        Hospital: {
            'day': (Secretary, Nurse, Doctor),
            'night': (Nurse, Doctor, Janitor),
            'supplemental day': [Nurse],
            'supplemental night': [Secretary, Nurse],
        },
        Hotel: {
            'day': (HotelMaid, Concierge),
            'night': (Concierge,),
            'supplemental day': [Manager, HotelMaid],
            'supplemental night': [],
        },
        LawFirm: {
            'day': (Secretary,),
            'night': (),
            'supplemental day': [Lawyer, Lawyer, Secretary, Lawyer],
            'supplemental night': [Janitor],
        },
        OptometryClinic: {
            'day': (),
            'night': (),
            'supplemental day': [Secretary, Nurse],
            'supplemental night': [Janitor],
        },
        PlasticSurgeryClinic: {
            'day': (),
            'night': (),
            'supplemental day': [Secretary, Nurse],
            'supplemental night': [Janitor],
        },
        PoliceStation: {
            'day': (PoliceOfficer,),
            'night': (PoliceOfficer,),
            'supplemental day': [Secretary, PoliceChief],
            'supplemental night': [PoliceOfficer],
        },
        RealtyFirm: {
            'day': (Secretary,),
            'night': (),
            'supplemental day': [Realtor, Realtor],
            'supplemental night': [Janitor],
        },
        Restaurant: {
            'day': (Waiter, Cook),
            'night': (Waiter, Cook),
            'supplemental day': [Busboy, Waiter, Manager, Dishwasher],
            'supplemental night': [Busboy, Waiter, Manager, Dishwasher],
        },
        School: {
            'day': (Janitor, Teacher, Teacher, Nurse, Principal),
            'night': (Janitor,),
            'supplemental day': [Teacher],
            'supplemental night': [Janitor],
        },
        Supermarket: {
            'day': (Cashier, Stocker, Manager),
            'night': (Stocker, Stocker),
            'supplemental day': [Cashier, Cashier, Stocker],
            'supplemental night': [Stocker],
        },
        TattooParlor: {
            'day': (),
            'night': (TattooArtist,),
            'supplemental day': [],
            'supplemental night': [Cashier],
        },
        TaxiDepot: {
            'day': (TaxiDriver,),
            'night': (TaxiDriver,),
            'supplemental day': [],
            'supplemental night': [TaxiDriver, Manager],
        },
        University: {
            'day': (Professor, Professor),
            'night': (Janitor,),
            'supplemental day': [Professor],
            'supplemental night': [Professor],
        },
        Cemetery: {
            'day': (Mortician,),
            'night': (Groundskeeper,),
            'supplemental day': [],
            'supplemental night': [],
        },
        Park: {
            'day': (Groundskeeper,),
            'night': (),
            'supplemental day': [Groundskeeper, Manager],
            'supplemental night': [],
        },
        # New businesses added after the above (hence two alphabetical sortings)
        Bakery: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [Cashier],
        },
        BlacksmithShop: {
            'day': (),
            'night': (),
            'supplemental day': [Apprentice],
            'supplemental night': [],
        },
        Brewery: {
            'day': (Brewer, Bottler, Cooper),
            'night': (),
            'supplemental day': [Brewer, Bottler, Bottler, Cooper],
            'supplemental night': [Janitor],
        },
        ButcherShop: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier, Butcher],
            'supplemental night': [Cashier],
        },
        CandyStore: {
            'day': (Cashier,),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [Cashier],
        },
        CarpentryCompany: {
            'day': (Woodworker,),
            'night': (),
            'supplemental day': [Turner, Joiner, Secretary],
            'supplemental night': [],
        },
        ClothingStore: {
            'day': (),
            'night': (),
            'supplemental day': [Dressmaker, Seamstress],
            'supplemental night': [],
        },
        Dairy: {
            'day': (Bottler,),
            'night': (),
            'supplemental day': [Bottler],
            'supplemental night': [Bottler],
        },
        Deli: {
            'day': (Cook, Cashier),
            'night': (Cook, Cashier),
            'supplemental day': [Dishwasher],
            'supplemental night': [Dishwasher],
        },
        DentistOffice: {
            'day': (),
            'night': (),
            'supplemental day': [Secretary, Dentist],
            'supplemental night': [Janitor],
        },
        DepartmentStore: {
            'day': (Cashier, Stocker, Manager),
            'night': (Stocker, Stocker, Janitor),
            'supplemental day': [Cashier, Cashier, Stocker],
            'supplemental night': [Stocker, Stocker, Janitor],
        },
        Diner: {
            'day': (Cook,),
            'night': (Cook, Waiter),
            'supplemental day': [Dishwasher],
            'supplemental night': [Dishwasher],
        },
        Distillery: {
            'day': (Distiller, Bottler, Cooper),
            'night': (),
            'supplemental day': [Bottler, Bottler, Cooper],
            'supplemental night': [Janitor],
        },
        DrugStore: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [],
        },
        Farm: {
            'day': (Farmhand,),
            'night': (),
            'supplemental day': [Farmhand, Farmhand],
            'supplemental night': [],
        },
        Foundry: {
            'day': (Molder, Puddler),
            'night': (),
            'supplemental day': [Molder, Molder],
            'supplemental night': [Janitor],
        },
        FurnitureStore: {
            'day': (),
            'night': (),
            'supplemental day': [Apprentice, Cashier, Woodworker],
            'supplemental night': [Janitor],
        },
        GeneralStore: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier, Stocker],
            'supplemental night': [Janitor],
        },
        GroceryStore: {
            'day': (Stocker,),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [Stocker, Janitor],
        },
        HardwareStore: {
            'day': (Stocker,),
            'night': (),
            'supplemental day': [],
            'supplemental night': [Janitor],
        },
        Inn: {
            'day': (),
            'night': (Innkeeper,),
            'supplemental day': [Concierge],
            'supplemental night': [],
        },
        Tavern: {
            'day': (Bartender,),
            'night': (Bartender,),
            'supplemental day': [],
            'supplemental night': [Bartender],
        },
        InsuranceCompany: {
            'day': (),
            'night': (),
            'supplemental day': [Secretary, InsuranceAgent, InsuranceAgent],
            'supplemental night': [Janitor],
        },
        JeweleryShop: {
            'day': (),
            'night': (),
            'supplemental day': [Cashier],
            'supplemental night': [],
        },
        PaintingCompany: {
            'day': (Painter, Whitewasher),
            'night': (),
            'supplemental day': [Painter],
            'supplemental night': [],
        },
        Pharmacy: {
            'day': (Pharmacist, Cashier),
            'night': (),
            'supplemental day': [],
            'supplemental night': [Janitor],
        },
        PlumbingCompany: {
            'day': (),
            'night': (),
            'supplemental day': [Secretary, Plumber],
            'supplemental night': [],
        },
        Quarry: {
            'day': (Quarryman, Stonecutter, Laborer, Laborer, Engineer),
            'night': (),
            'supplemental day': [Laborer] * 100,  # Endlessly hiring more laborers if someone needs a job
            'supplemental night': [],
        },
        CoalMine: {
            'day': (Miner, Miner, Engineer),
            'night': (Miner, Miner, Miner),
            'supplemental day': [Miner] * 100,  # Endlessly hiring more miners if someone needs a job
            'supplemental night': [Miner] * 100,
        },
        ShoemakerShop: {
            'day': (),
            'night': (),
            'supplemental day': [Apprentice],
            'supplemental night': [],
        },
        TailorShop: {
            'day': (),
            'night': (),
            'supplemental day': [Apprentice],
            'supplemental night': [],
        },
    }
    # Occupations for which a college degree is required
    occupations_requiring_college_degree = {
        Doctor, Architect, Optometrist, PlasticSurgeon, Lawyer, Professor, Pharmacist, Dentist
    }
    # Job levels of various occupations (indexed by their class names)
    job_levels = {
        None: 0,  # Unemployed
        Apprentice: 1,
        Cashier: 1,
        Janitor: 1,
        Builder: 1,
        HotelMaid: 1,
        Waiter: 1,
        Secretary: 1,
        Laborer: 1,
        Groundskeeper: 1,
        Whitewasher: 1,
        Bottler: 1,
        Bricklayer: 1,
        Cook: 1,
        Dishwasher: 1,
        Busboy: 1,
        Stocker: 1,
        Seamstress: 1,
        Farmhand: 1,
        Miner: 1,
        Painter: 1,
        BankTeller: 2,
        Grocer: 2,
        Bartender: 2,
        Concierge: 2,
        DaycareProvider: 2,
        Landlord: 2,
        Baker: 2,
        Cooper: 2,
        Barkeeper: 2,
        Milkman: 2,
        Plasterer: 2,
        Barber: 2,
        Butcher: 2,
        Firefighter: 2,
        PoliceOfficer: 2,
        Carpenter: 2,
        TaxiDriver: 2,
        BusDriver: 2,
        Blacksmith: 2,
        Woodworker: 2,
        Stonecutter: 2,
        Dressmaker: 2,
        Distiller: 2,
        Plumber: 2,
        Joiner: 2,
        Innkeeper: 2,
        Nurse: 2,
        Farmer: 2,
        Shoemaker: 2,
        Brewer: 2,
        TattooArtist: 2,
        Puddler: 2,
        Clothier: 2,
        Teacher: 2,
        Tailor: 2,
        Molder: 2,
        Turner: 2,
        Quarryman: 2,
        Proprietor: 2,
        Manager: 2,
        Druggist: 3,
        InsuranceAgent: 3,
        Jeweler: 3,
        FireChief: 3,
        PoliceChief: 3,
        Realtor: 3,
        Principal: 3,
        Mortician: 3,
        Doctor: 4,
        Engineer: 4,
        Pharmacist: 4,
        Architect: 4,
        Optometrist: 4,
        Dentist: 4,
        PlasticSurgeon: 4,
        Lawyer: 4,
        Professor: 4,
        Owner: 5,
        Mayor: 5,
    }
    # Preconditions to various occupations that enforce historical accuracy with
    # regard to gender and occupation (to preclude anachronisms, which of course
    # may not be an issue in many projects)
    employable_as_a = {
        Apprentice: lambda applicant: applicant.male,
        Cashier: lambda applicant: applicant.male if applicant.sim.year < 1917 else True,
        Janitor: lambda applicant: applicant.male if applicant.sim.year < 1966 else True,
        Builder: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        HotelMaid: lambda applicant: applicant.female,
        Waiter: lambda applicant: applicant.male if applicant.sim.year < 1917 else True,
        Secretary: lambda applicant: applicant.female,
        Laborer: lambda applicant: applicant.male,
        Groundskeeper: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Whitewasher: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Bottler: lambda applicant: applicant.male if applicant.sim.year < 1943 else True,
        Bricklayer: lambda applicant: applicant.male,
        Cook: lambda applicant: applicant.male if applicant.sim.year < 1966 else True,
        Dishwasher: lambda applicant: applicant.male if applicant.sim.year < 1966 else True,
        Busboy: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Stocker: lambda applicant: applicant.male if applicant.sim.year < 1943 else True,
        Seamstress: lambda applicant: applicant.female,
        Farmhand: lambda applicant: applicant.male,
        Miner: lambda applicant: applicant.male,
        Painter: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        BankTeller: lambda applicant: applicant.male if applicant.sim.year < 1950 else True,
        Grocer: lambda applicant: applicant.male if applicant.sim.year < 1966 else True,
        Bartender: lambda applicant: applicant.male if applicant.sim.year < 1968 else True,
        Concierge: lambda applicant: applicant.male if applicant.sim.year < 1968 else True,
        DaycareProvider: lambda applicant: applicant.female if applicant.sim.year < 1977 else True,
        Landlord: lambda applicant: applicant.male if applicant.sim.year < 1925 else True,
        Baker: lambda applicant: applicant.male if applicant.sim.year < 1935 else True,
        Cooper: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Barkeeper: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Milkman: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Plasterer: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Barber: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Butcher: lambda applicant: applicant.male,
        Firefighter: lambda applicant: applicant.male,
        PoliceOfficer: lambda applicant: applicant.male,
        Carpenter: lambda applicant: applicant.male,
        TaxiDriver: lambda applicant: applicant.male,
        BusDriver: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        Blacksmith: lambda applicant: applicant.male,
        Woodworker: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Stonecutter: lambda applicant: applicant.male,
        Dressmaker: lambda applicant: applicant.female if applicant.sim.year < 1977 else True,
        Distiller: lambda applicant: applicant.male,
        Plumber: lambda applicant: applicant.male,
        Joiner: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Innkeeper: lambda applicant: applicant.male if applicant.sim.year < 1928 else True,
        Nurse: lambda applicant: applicant.female if applicant.sim.year < 1977 else True,
        Farmer: lambda applicant: applicant.male,
        Shoemaker: lambda applicant: applicant.male if applicant.sim.year < 1960 else True,
        Brewer: lambda applicant: applicant.male,
        TattooArtist: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        Puddler: lambda applicant: applicant.male,
        Clothier: lambda applicant: applicant.male if applicant.sim.year < 1930 else True,
        Teacher: lambda applicant: applicant.female if applicant.sim.year < 1955 else True,
        Principal: lambda applicant: (
            applicant.male if applicant.sim.year < 1965 else True and
                                                              any(o for o in applicant.occupations if
                                                                  o.__class__ is Teacher)
        ),
        Tailor: lambda applicant: applicant.male if applicant.sim.year < 1955 else True,
        Molder: lambda applicant: applicant.male,
        Turner: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Quarryman: lambda applicant: applicant.male,
        Proprietor: lambda applicant: applicant.male if applicant.sim.year < 1955 else True,
        Manager: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        Druggist: lambda applicant: applicant.male,
        InsuranceAgent: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        Jeweler: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        FireChief: lambda applicant: (
            applicant.male and any(o for o in applicant.occupations if o.__class__ is Firefighter)
        ),
        PoliceChief: lambda applicant: (
            applicant.male and any(o for o in applicant.occupations if o.__class__ is PoliceOfficer)
        ),
        Realtor: lambda applicant: applicant.male if applicant.sim.year < 1966 else True,
        Mortician: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Doctor: lambda applicant: (
            applicant.male if applicant.sim.year < 1972 else True and
                                                              not applicant.occupations
        ),
        Engineer: lambda applicant: (
            applicant.male if applicant.sim.year < 1977 else True and
                                                              not applicant.occupations
        ),
        Pharmacist: lambda applicant: applicant.male if applicant.sim.year < 1972 else True,
        Architect: lambda applicant: (
            applicant.male if applicant.sim.year < 1977 else True and
                                                              not applicant.occupations
        ),
        Optometrist: lambda applicant: (
            applicant.male if applicant.sim.year < 1972 else True and
                                                              not applicant.occupations
        ),
        Dentist: lambda applicant: (
            applicant.male if applicant.sim.year < 1972 else True and
                                                              not applicant.occupations
        ),
        PlasticSurgeon: lambda applicant: (
            applicant.male if applicant.sim.year < 1977 else True and
                                                              not applicant.occupations
        ),
        Lawyer: lambda applicant: (
            applicant.male if applicant.sim.year < 1977 else True and
                                                              not applicant.occupations
        ),
        Professor: lambda applicant: applicant.male if applicant.sim.year < 1962 else True,
        Owner: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
        Mayor: lambda applicant: applicant.male if applicant.sim.year < 1977 else True,
    }
